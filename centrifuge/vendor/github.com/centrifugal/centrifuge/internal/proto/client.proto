// Code generated by compiling proto template. DO NOT EDIT.
// protoc --proto_path=$GOPATH/src:$GOPATH/src/github.com/centrifugal/centrifuge/vendor:. --gogofaster_out=plugins=grpc:. client.proto
syntax = "proto3";

package proto;

import "github.com/gogo/protobuf/gogoproto/gogo.proto";

option (gogoproto.equal_all) = true;
option (gogoproto.populate_all) = true;
option (gogoproto.testgen_all) = true;

message Error {
    uint32 code = 1 [(gogoproto.jsontag) = "code"];
    string message = 2 [(gogoproto.jsontag) = "message"];
}

enum MethodType {
    
    option (gogoproto.goproto_enum_prefix) = false;
    
    CONNECT = 0 [(gogoproto.enumvalue_customname) = "MethodTypeConnect"];
    SUBSCRIBE = 1 [(gogoproto.enumvalue_customname) = "MethodTypeSubscribe"];
    UNSUBSCRIBE = 2 [(gogoproto.enumvalue_customname) = "MethodTypeUnsubscribe"];
    PUBLISH = 3 [(gogoproto.enumvalue_customname) = "MethodTypePublish"];
    PRESENCE = 4 [(gogoproto.enumvalue_customname) = "MethodTypePresence"];
    PRESENCE_STATS = 5 [(gogoproto.enumvalue_customname) = "MethodTypePresenceStats"];
    HISTORY = 6 [(gogoproto.enumvalue_customname) = "MethodTypeHistory"];
    PING = 7 [(gogoproto.enumvalue_customname) = "MethodTypePing"];
    SEND = 8 [(gogoproto.enumvalue_customname) = "MethodTypeSend"];
    RPC = 9 [(gogoproto.enumvalue_customname) = "MethodTypeRPC"];
    REFRESH = 10 [(gogoproto.enumvalue_customname) = "MethodTypeRefresh"];
}

message Command {
    uint32 id = 1 [(gogoproto.customname) = "ID", (gogoproto.jsontag) = "id,omitempty"];
    MethodType method = 2 [(gogoproto.jsontag) = "method,omitempty"];
    bytes params = 3 [(gogoproto.customtype) = "Raw", (gogoproto.jsontag) = "params,omitempty", (gogoproto.nullable) = false];
}

message Reply {
    uint32 id = 1 [(gogoproto.customname) = "ID", (gogoproto.jsontag) = "id,omitempty"];
    Error error = 2 [(gogoproto.jsontag) = "error,omitempty"];
    bytes result = 3 [(gogoproto.customtype) = "Raw", (gogoproto.jsontag) = "result,omitempty", (gogoproto.nullable) = false];
}

enum PushType {
    option (gogoproto.goproto_enum_prefix) = false;
    PUBLICATION = 0 [(gogoproto.enumvalue_customname) = "PushTypePublication"];
    JOIN = 1 [(gogoproto.enumvalue_customname) = "PushTypeJoin"];
    LEAVE = 2 [(gogoproto.enumvalue_customname) = "PushTypeLeave"];
    UNSUB = 3 [(gogoproto.enumvalue_customname) = "PushTypeUnsub"];
    MESSAGE = 4 [(gogoproto.enumvalue_customname) = "PushTypeMessage"];
}

message Push {
    PushType type = 1 [(gogoproto.jsontag) = "type,omitempty"];
    string channel = 2 [(gogoproto.jsontag) = "channel,omitempty"];
    bytes data = 3 [(gogoproto.customtype) = "Raw", (gogoproto.jsontag) = "data", (gogoproto.nullable) = false];
}

message ClientInfo {
    string user = 1 [(gogoproto.jsontag) = "user"];
    string client = 2 [(gogoproto.jsontag) = "client"];
    bytes conn_info = 3 [(gogoproto.customtype) = "Raw", (gogoproto.jsontag) = "conn_info,omitempty", (gogoproto.nullable) = false];
    bytes chan_info = 4 [(gogoproto.customtype) = "Raw", (gogoproto.jsontag) = "chan_info,omitempty", (gogoproto.nullable) = false];
}

message Publication {
    string uid = 1 [(gogoproto.customname) = "UID", (gogoproto.jsontag) = "uid,omitempty"];
    bytes data = 2 [(gogoproto.customtype) = "Raw", (gogoproto.jsontag) = "data", (gogoproto.nullable) = false];
    ClientInfo info = 3 [(gogoproto.jsontag) = "info,omitempty"];
}

message Join {
    ClientInfo info = 1 [(gogoproto.jsontag) = "info", (gogoproto.nullable) = false];
}

message Leave {
    ClientInfo info = 1 [(gogoproto.jsontag) = "info", (gogoproto.nullable) = false];
}

message Unsub {}

message Message {
    bytes data = 1 [(gogoproto.customtype) = "Raw", (gogoproto.jsontag) = "data", (gogoproto.nullable) = false];
}

message SignedCredentials {
    string user = 1 [(gogoproto.jsontag) = "user"];
    string exp = 2 [(gogoproto.jsontag) = "exp"];
    string info = 3 [(gogoproto.jsontag) = "info"];
    string opts = 4 [(gogoproto.jsontag) = "opts"];
    string sign = 5 [(gogoproto.jsontag) = "sign"];
}

message ConnectRequest {
    SignedCredentials credentials = 1  [(gogoproto.jsontag) = "credentials"];
    bytes data = 2 [(gogoproto.customtype) = "Raw", (gogoproto.jsontag) = "data,omitempty", (gogoproto.nullable) = false];
}

message ConnectResponse {
    Error error = 1 [(gogoproto.jsontag) = "error,omitempty"];
    ConnectResult result = 2 [(gogoproto.jsontag) = "result,omitempty"];
}

message ConnectResult {
    string client = 1 [(gogoproto.jsontag) = "client"];
    string version = 2 [(gogoproto.jsontag) = "version"];
    bool expires = 3 [(gogoproto.jsontag) = "expires,omitempty"];
    bool expired = 4 [(gogoproto.jsontag) = "expired,omitempty"];
    uint32 ttl = 5 [(gogoproto.customname) = "TTL", (gogoproto.jsontag) = "ttl,omitempty"];
    bytes data = 6 [(gogoproto.customtype) = "Raw", (gogoproto.jsontag) = "data,omitempty", (gogoproto.nullable) = false];
}

message RefreshRequest {
    SignedCredentials credentials = 1  [(gogoproto.jsontag) = "credentials"];
}

message RefreshResponse {
    Error error = 1 [(gogoproto.jsontag) = "error,omitempty"];
    RefreshResult result = 2 [(gogoproto.jsontag) = "result,omitempty"];
}

message RefreshResult {
    string client = 1 [(gogoproto.jsontag) = "client"];
    string version = 2 [(gogoproto.jsontag) = "version"];
    bool expires = 3 [(gogoproto.jsontag) = "expires,omitempty"];
    bool expired = 4 [(gogoproto.jsontag) = "expired,omitempty"];
    uint32 ttl = 5 [(gogoproto.customname) = "TTL", (gogoproto.jsontag) = "ttl,omitempty"];
    bytes meta = 6 [(gogoproto.customtype) = "Raw", (gogoproto.jsontag) = "meta,omitempty"];
}

message SubscribeRequest {
    string channel = 1 [(gogoproto.jsontag) = "channel"];
    string client = 2 [(gogoproto.jsontag) = "client"];
    string info = 3 [(gogoproto.jsontag) = "info"];
    string sign = 4 [(gogoproto.jsontag) = "sign"];
    bool recover = 5 [(gogoproto.jsontag) = "recover"];
    string last = 6 [(gogoproto.jsontag) = "last"];
}

message SubscribeResponse {
    Error error = 1 [(gogoproto.jsontag) = "error,omitempty"];
    SubscribeResult result = 2 [(gogoproto.jsontag) = "result,omitempty"];
}

message SubscribeResult {
    string last = 1 [(gogoproto.jsontag) = "last,omitempty"];
    bool recovered = 2 [(gogoproto.jsontag) = "recovered,omitempty"];
    repeated Publication publications = 3 [(gogoproto.jsontag) = "publications,omitempty"];
}

message UnsubscribeRequest {
    string channel = 1 [(gogoproto.jsontag) = "channel"];
}

message UnsubscribeResponse {
    Error error = 1 [(gogoproto.jsontag) = "error,omitempty"];
    UnsubscribeResult result = 2 [(gogoproto.jsontag) = "result,omitempty"];
}

message UnsubscribeResult {}

message PublishRequest {
    string channel = 1 [(gogoproto.jsontag) = "channel"];
    bytes data = 2 [(gogoproto.customtype) = "Raw", (gogoproto.jsontag) = "data", (gogoproto.nullable) = false];
}

message PublishResponse {
    Error error = 1 [(gogoproto.jsontag) = "error,omitempty"];
    PublishResult result = 2 [(gogoproto.jsontag) = "result,omitempty"];
}

message PublishResult {}

message PresenceRequest {
    string channel = 1 [(gogoproto.jsontag) = "channel"];
}

message PresenceResponse {
    Error error = 1 [(gogoproto.jsontag) = "error,omitempty"];
    PresenceResult result = 2 [(gogoproto.jsontag) = "result,omitempty"];
}

message PresenceResult {
    map<string, ClientInfo> presence = 1 [(gogoproto.jsontag) = "presence"];
}

message PresenceStatsRequest {
    string channel = 1 [(gogoproto.jsontag) = "channel"];
}

message PresenceStatsResponse {
    Error error = 1 [(gogoproto.jsontag) = "error,omitempty"];
    PresenceStatsResult result = 2 [(gogoproto.jsontag) = "result,omitempty"];
}

message PresenceStatsResult {
    uint32 num_clients = 1 [(gogoproto.jsontag) = "num_clients"];
    uint32 num_users = 2 [(gogoproto.jsontag) = "num_users"];
}

message HistoryRequest {
    string channel = 1 [(gogoproto.jsontag) = "channel"];
}

message HistoryResponse {
    Error error = 1 [(gogoproto.jsontag) = "error,omitempty"];
    HistoryResult result = 2 [(gogoproto.jsontag) = "result,omitempty"];
}

message HistoryResult {
    repeated Publication publications = 1 [(gogoproto.jsontag) = "publications"];
}

message PingRequest {
    string data = 1 [(gogoproto.jsontag) = "data"];
}

message PingResponse {
    Error error = 1 [(gogoproto.jsontag) = "error,omitempty"];
    PingResult result = 2 [(gogoproto.jsontag) = "result,omitempty"];
}

message PingResult {
    string data = 1 [(gogoproto.jsontag) = "data"];
}

message RPCRequest{
    bytes data = 1 [(gogoproto.customtype) = "Raw", (gogoproto.jsontag) = "data", (gogoproto.nullable) = false];
}

message RPCResponse{
    Error error = 1 [(gogoproto.jsontag) = "error,omitempty"];
    RPCResult result = 2 [(gogoproto.jsontag) = "result,omitempty"];
}

message RPCResult {
    bytes data = 1  [(gogoproto.customtype) = "Raw", (gogoproto.jsontag) = "data,omitempty", (gogoproto.nullable) = false];
}

message SendRequest{
    bytes data = 1 [(gogoproto.customtype) = "Raw", (gogoproto.jsontag) = "data", (gogoproto.nullable) = false];
}

service Centrifuge {
    rpc Communicate(stream Command) returns (stream Reply) {}
}
