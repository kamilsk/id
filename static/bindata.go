// Code generated by go-bindata.
// sources:
// static/migrations/1_initial.sql
// static/scripts/passport.min.js
// DO NOT EDIT!

package static

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _staticMigrations1_initialSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\xd0\x31\x6f\xb3\x30\x10\x06\xe0\xdd\xbf\xe2\xe4\x09\xf4\x85\xe1\x93\xaa\x2e\x4c\x26\x5c\xd2\x53\xc1\x50\x63\x57\xc9\x54\xa1\xe2\x46\xa8\x0d\x20\x07\x9a\xbf\x5f\x91\xc4\x55\x23\x71\xf3\xf3\xbe\xf6\x5d\x14\xc1\xbf\x63\x7b\x70\xf5\x68\xc1\x0c\x8c\xad\x15\x0a\x8d\x80\x3b\x8d\xb2\xa2\x42\x02\x6d\x40\x16\x1a\x70\x47\x95\xae\x80\x4f\x53\xdb\x44\xfd\xe9\x34\xf0\xf8\x17\x6b\x91\x64\x08\xfc\xa3\xed\x0e\xd6\x0d\xae\xed\x46\x0e\x01\x03\xe0\x6d\xc3\xc1\x4f\x42\xdb\x0a\x15\x89\x0c\x4a\x45\xb9\x50\x7b\x78\xc6\xfd\x6a\x56\xc7\xda\x7d\x5a\x77\x95\xc6\x50\xea\x13\xf3\xb3\xd2\x64\xd9\x05\x7d\xd7\x5f\x93\xbd\xb5\xbd\x0a\xb5\x7e\x12\x2a\x78\x7c\x08\xef\xd1\x7b\x3f\x75\xe3\xad\x2a\xa1\x2d\x49\x7d\xdf\x04\x29\x6e\x84\xc9\x34\xfc\xbf\x72\x67\xeb\xd1\x36\x6f\xf5\xc8\x41\x53\x8e\x95\x16\x79\xb9\xc4\xbb\xfe\x1c\x84\x97\xc8\x34\x34\xcb\x91\x99\xcf\xe3\x23\xfe\x4f\x46\xd2\x8b\x41\x08\xfc\x96\x2b\xbf\x4a\xc8\xc2\x98\xb1\xbf\xe7\x4f\xfb\x73\xc7\x58\xaa\x8a\x72\xe9\xa2\x31\xfb\x09\x00\x00\xff\xff\xc9\xeb\xcc\xee\xab\x01\x00\x00")

func staticMigrations1_initialSqlBytes() ([]byte, error) {
	return bindataRead(
		_staticMigrations1_initialSql,
		"static/migrations/1_initial.sql",
	)
}

func staticMigrations1_initialSql() (*asset, error) {
	bytes, err := staticMigrations1_initialSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/migrations/1_initial.sql", size: 427, mode: os.FileMode(420), modTime: time.Unix(1522409989, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _staticScriptsPassportMinJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x93\xcf\x6e\x1b\x21\x10\xc6\xef\x7d\x0a\xcc\x61\x05\x32\xd9\xd8\x3d\x55\xb6\x68\xa5\xfe\x93\x5a\x45\x4d\xda\xa4\xea\x99\xb0\xb3\x36\xd1\x1a\x56\x30\x1b\xd7\xc2\xbc\x7b\x85\xed\x5d\xaf\xab\xe6\xd2\x1b\x33\x0c\x33\x1f\xbf\x0f\x26\x75\x67\x35\x1a\x67\x19\x0a\x2b\xbc\x00\xe1\x84\xe2\x91\x76\x01\x48\x40\x6f\x34\xd2\x25\x96\x77\x2a\x84\xd6\x79\x94\xb1\x36\x76\x05\xbe\xf5\xc6\xe2\xe2\xd9\x99\x8a\xcc\xc4\x06\x50\x55\x0a\x55\x1f\x6b\xd7\x59\x04\xdf\x87\x61\x67\x35\x54\xa7\x28\x2d\x9f\x95\x27\xe6\x3f\xfa\x24\xa1\xe5\x64\x2e\x82\x9c\xcc\x97\xbd\x66\x52\x31\xe4\x51\x15\x85\x63\xb4\x3d\x49\x5c\x10\x3a\x45\x9e\x86\x92\x8e\x79\xe1\x78\xac\x98\x9b\x52\xb2\x56\x81\x04\xb0\x48\x14\xb1\x0e\x4d\x6d\xb4\xca\x45\x94\x1f\x64\x29\xc9\xe8\x35\x95\x52\xda\x32\x74\x8f\x01\x3d\xbb\x9a\xf3\x77\x43\x30\x13\xb6\x6c\xc0\xae\x70\x7d\x35\xe7\x0b\xcb\xa7\x34\xc6\xf2\x93\xad\x5a\x67\x2c\xa6\x44\x97\xc0\x22\xee\x5a\x58\xd0\xbb\xdb\xfb\x07\x2a\x3a\xdf\x2c\x94\x38\xdc\xe8\xeb\xfd\xed\xb7\x32\xe3\xb4\x2b\x53\xef\x98\xe1\x42\x3b\x8b\x60\xf1\xe1\x50\xaf\xda\xb6\x39\x49\xb9\x7e\x0a\xce\x2e\x89\x5e\x2b\x1f\x00\x65\x87\xf5\xd5\x1b\x2a\x42\xa7\x35\x84\xb0\x18\xcc\xe2\x51\xcb\xc9\x4c\xe8\x06\x94\xff\x92\x29\x3d\xab\x86\x79\x2e\xce\x56\x95\x23\xc2\xd2\x8c\xa3\x71\x51\xcf\x5c\x9a\x61\x39\xde\x3e\x59\x20\x4d\xbf\x12\x15\xa3\x01\x6c\x05\xfe\xc8\xf2\xe0\x2d\x51\xa4\x55\xbb\xc6\xa9\x8a\x72\x71\x04\x6d\x02\xa9\x9c\x05\xca\x93\xd0\x6e\xd3\x36\x80\x30\x16\x9f\x5d\x4c\x69\xe4\x52\xcb\x78\xf4\x80\x9d\xb7\x13\x5d\x14\xc3\xb8\xb7\x31\x96\x37\x66\x63\x30\xa5\xbf\x4c\xd6\xde\xa0\xd1\xaa\x59\xf4\xa3\xc9\x56\x85\x6c\x2a\x79\x84\x83\xc5\x94\x0b\xbd\xdf\xff\xab\x53\xca\x5e\xd7\x32\x00\x0e\xe4\x46\xd2\x26\xa1\x28\x98\x85\x2d\xf1\xbc\x5c\x01\xb2\xf1\xff\xe0\xd1\xd4\x0c\x27\xf2\x92\x67\x51\xb0\x8b\x58\xa2\x38\xd3\x94\x56\x0c\x1a\xe4\x2c\xe3\xd3\xce\x7b\xd0\xe8\x8e\x04\x37\xaa\x02\xa2\xc8\x29\x79\x78\x8b\xfc\x7c\x62\x3a\x15\x2d\xe3\xfc\x48\x86\x5c\xba\x5d\x73\x71\xf8\x19\x17\x2d\x07\xee\xcb\xf3\xcd\x65\x8c\xe5\xc3\xda\x43\x58\xbb\xa6\xca\x20\x59\xc8\x6f\xa7\x63\xb5\x38\x9f\xa4\x9c\x27\x9e\x44\x8c\xe5\x87\x63\x2a\x25\x2e\x9a\x97\x20\x99\x9a\xbd\xa8\xab\x39\xeb\xda\x2a\xd4\x6b\x18\xab\x0a\xfb\x7d\x3f\xbd\x11\xfd\x7e\x9e\x9d\x27\xff\xca\x61\x7e\x16\x6c\x6b\x6c\xe5\xb6\x22\x7f\xb0\xf7\x2a\xc0\xcf\x1f\x37\x29\x51\x71\xcc\x96\x9f\xcf\xa8\x5f\xf7\xb9\xa7\xef\x1d\xf8\x5d\xa9\x9e\xd4\xef\x3e\xa5\x9d\x0d\xae\x81\xb2\x71\xab\xdc\xfc\x23\x3c\x76\xab\x94\xf8\xf2\xd5\x9f\x00\x00\x00\xff\xff\x99\x85\xde\xbd\xf3\x04\x00\x00")

func staticScriptsPassportMinJsBytes() ([]byte, error) {
	return bindataRead(
		_staticScriptsPassportMinJs,
		"static/scripts/passport.min.js",
	)
}

func staticScriptsPassportMinJs() (*asset, error) {
	bytes, err := staticScriptsPassportMinJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/scripts/passport.min.js", size: 1267, mode: os.FileMode(420), modTime: time.Unix(1522423661, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"static/migrations/1_initial.sql": staticMigrations1_initialSql,
	"static/scripts/passport.min.js": staticScriptsPassportMinJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"static": &bintree{nil, map[string]*bintree{
		"migrations": &bintree{nil, map[string]*bintree{
			"1_initial.sql": &bintree{staticMigrations1_initialSql, map[string]*bintree{}},
		}},
		"scripts": &bintree{nil, map[string]*bintree{
			"passport.min.js": &bintree{staticScriptsPassportMinJs, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

