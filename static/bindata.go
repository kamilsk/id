// Code generated by go-bindata.
// sources:
// static/migrations/1_initial.sql
// static/scripts/passport.min.js
// DO NOT EDIT!

package static

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _staticMigrations1_initialSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\xd0\x31\x6f\xb3\x30\x10\x06\xe0\xdd\xbf\xe2\xe4\x09\xf4\x85\xe1\x93\xaa\x2e\x4c\x26\x5c\xd2\x53\xc1\x50\x63\x57\xc9\x54\xa1\xe2\x46\xa8\x0d\x20\x07\x9a\xbf\x5f\x91\xc4\x55\x23\x71\xf3\xf3\xbe\xf6\x5d\x14\xc1\xbf\x63\x7b\x70\xf5\x68\xc1\x0c\x8c\xad\x15\x0a\x8d\x80\x3b\x8d\xb2\xa2\x42\x02\x6d\x40\x16\x1a\x70\x47\x95\xae\x80\x4f\x53\xdb\x44\xfd\xe9\x34\xf0\xf8\x17\x6b\x91\x64\x08\xfc\xa3\xed\x0e\xd6\x0d\xae\xed\x46\x0e\x01\x03\xe0\x6d\xc3\xc1\x4f\x42\xdb\x0a\x15\x89\x0c\x4a\x45\xb9\x50\x7b\x78\xc6\xfd\x6a\x56\xc7\xda\x7d\x5a\x77\x95\xc6\x50\xea\x13\xf3\xb3\xd2\x64\xd9\x05\x7d\xd7\x5f\x93\xbd\xb5\xbd\x0a\xb5\x7e\x12\x2a\x78\x7c\x08\xef\xd1\x7b\x3f\x75\xe3\xad\x2a\xa1\x2d\x49\x7d\xdf\x04\x29\x6e\x84\xc9\x34\xfc\xbf\x72\x67\xeb\xd1\x36\x6f\xf5\xc8\x41\x53\x8e\x95\x16\x79\xb9\xc4\xbb\xfe\x1c\x84\x97\xc8\x34\x34\xcb\x91\x99\xcf\xe3\x23\xfe\x4f\x46\xd2\x8b\x41\x08\xfc\x96\x2b\xbf\x4a\xc8\xc2\x98\xb1\xbf\xe7\x4f\xfb\x73\xc7\x58\xaa\x8a\x72\xe9\xa2\x31\xfb\x09\x00\x00\xff\xff\xc9\xeb\xcc\xee\xab\x01\x00\x00")

func staticMigrations1_initialSqlBytes() ([]byte, error) {
	return bindataRead(
		_staticMigrations1_initialSql,
		"static/migrations/1_initial.sql",
	)
}

func staticMigrations1_initialSql() (*asset, error) {
	bytes, err := staticMigrations1_initialSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/migrations/1_initial.sql", size: 427, mode: os.FileMode(420), modTime: time.Unix(1522409989, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _staticScriptsPassportMinJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x54\x4d\x8f\x23\x27\x10\xbd\xe7\x57\x60\x0e\x2d\x90\x2b\xc4\x93\x53\xd4\x16\x7b\xd9\x64\xa5\x44\x51\x76\xa3\x1d\x29\x67\x06\xaa\x6d\x46\x0c\xb4\xa0\x7a\x3c\x16\xe6\xbf\x47\xdd\xfe\x18\xcf\x21\x39\x75\xd5\x13\x45\xbf\xf7\xaa\x8a\xd5\x30\x45\x4b\x3e\x45\x41\x80\x10\xc1\x43\x96\x95\x4f\x05\x59\xa1\xec\x2d\xf1\xed\xab\xc9\xcc\x68\x52\xdf\x4c\x29\x63\xca\x74\x17\x9e\x4e\xd5\xe1\xd3\xb4\xeb\xb3\x5a\xbe\x0d\x92\xae\x83\x8f\x3b\xcc\x63\xf6\x91\xfa\xd7\xe4\x1d\xdb\xc0\x0b\x92\x71\x86\xcc\x25\x6f\x60\xf5\x06\x8a\x5e\x3d\x80\xd3\xab\x87\xed\x95\x02\x1b\x05\xc9\x6a\xce\x77\x75\x9d\x17\x59\x8d\x19\x07\xff\xb6\x26\xd9\x6e\x87\x86\x99\xa9\xac\x7e\x10\xab\xd2\x75\xf6\x53\x56\xc1\xbf\x78\xfa\x70\x9e\xdb\xec\xc9\x5b\x13\x7a\x36\x9a\x63\x48\xc6\xb1\x83\x29\x2c\x26\x62\x4f\xc8\x0a\x46\xe2\x12\xca\xe9\x74\xab\x96\x19\x69\xca\x91\xd9\x80\x26\xff\x1e\x09\xf3\xab\x09\x82\x24\x2c\x8c\x47\x81\x6b\xce\x7c\x61\x2e\x45\xe4\x72\xeb\x4e\x27\xe1\xf4\x6a\x03\x76\xbd\x86\x28\x2a\x1d\x47\xec\xf9\xb7\xaf\xdf\x1f\x39\x4c\x39\xf4\x59\x61\x74\x63\xf2\x91\x60\x91\xfd\xc7\xf7\xaf\x7f\xa9\xd9\xcf\xb8\xf3\xc3\x51\x24\x09\x36\x45\xc2\x48\x8f\x4b\xa1\x19\xc7\xe0\xad\x99\xd5\xfd\xf4\x5c\x52\xdc\x32\xbb\x37\xb9\x20\xe9\x89\x86\x1f\x7f\xe1\xf0\xb6\xcf\x5f\x3c\x06\x57\xfa\x7a\xf0\xb4\xff\x9c\xd1\x61\x24\x6f\x42\xe9\x57\x9b\x06\x65\xb2\x16\x4b\xe9\x6f\xad\x94\xb5\xcc\xec\x8c\xba\xeb\x85\x4e\xf7\x19\x18\x75\x6d\x8a\x4e\xb7\x10\x46\xc1\x0b\x46\x87\x99\xed\x4d\x61\xe5\x18\x2d\x3a\x66\xae\x1e\x72\xd9\xc0\xa6\x97\x31\x20\xe1\xfd\xcf\xe6\x26\xc2\xd9\xa3\xa5\x0c\x23\x31\x33\x9b\xed\x87\x8b\x2c\x46\x89\xf1\xf5\xbb\x2d\xb2\x35\x29\xdb\x3c\x59\x01\x26\x5d\x90\x6e\x96\x8b\xa0\x1f\x40\x44\x3c\x30\x94\x6a\x87\x24\xee\xe7\x53\xd6\x0f\x22\x34\xc1\x3b\x77\x8d\x4d\xc2\x1d\xa9\xff\xbe\x83\x56\xfa\xa3\x19\x5d\x27\xfe\xef\x5e\x08\x7a\x33\x3b\x63\x53\xce\x68\x29\x9d\xcd\x79\x31\x0e\x99\x61\x17\xd0\xa7\xc8\xa5\x84\xf5\x3a\x7c\xd2\x59\xd1\x3e\x63\xd9\xa7\xe0\xba\x6e\x10\x13\xbc\x57\x72\xd9\x64\x93\x90\xd5\x05\x91\xb0\xfb\xa0\xfe\x8e\xff\x20\x76\xc0\x0f\x86\xec\x1e\xe7\x32\xc8\x6a\x49\x64\x13\x07\x1f\x5d\x3a\xc0\xf9\xa3\xbe\xbc\xf3\xfe\xf9\x8a\x3d\xff\x3d\x61\x3e\x2a\xf3\x6c\xde\xae\x90\x4d\xb1\xa4\x80\x2a\xa4\x1d\xd4\x6b\x1b\x7a\x5e\xab\xfa\xed\x92\xb4\xc6\xe1\xbc\x3e\x3d\x1f\x2f\x0b\xde\x33\x0e\xcb\x7e\xf4\xb5\xaa\x3f\xe7\xa0\x35\xb8\xa9\x9b\xc1\xc7\x6b\xd2\xe6\xd9\x58\x44\xcd\xf0\xe7\x73\xd8\x1a\x2c\xac\x67\xe8\x9f\x39\x68\x0d\xce\x2f\x46\xad\xea\xd7\xe5\xc9\x68\x4d\x6e\x7f\xf8\x37\x00\x00\xff\xff\x0f\xef\x91\x29\x86\x04\x00\x00")

func staticScriptsPassportMinJsBytes() ([]byte, error) {
	return bindataRead(
		_staticScriptsPassportMinJs,
		"static/scripts/passport.min.js",
	)
}

func staticScriptsPassportMinJs() (*asset, error) {
	bytes, err := staticScriptsPassportMinJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/scripts/passport.min.js", size: 1158, mode: os.FileMode(420), modTime: time.Unix(1522516048, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"static/migrations/1_initial.sql": staticMigrations1_initialSql,
	"static/scripts/passport.min.js": staticScriptsPassportMinJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"static": &bintree{nil, map[string]*bintree{
		"migrations": &bintree{nil, map[string]*bintree{
			"1_initial.sql": &bintree{staticMigrations1_initialSql, map[string]*bintree{}},
		}},
		"scripts": &bintree{nil, map[string]*bintree{
			"passport.min.js": &bintree{staticScriptsPassportMinJs, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

