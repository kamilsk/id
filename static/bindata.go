// Code generated by go-bindata.
// sources:
// static/migrations/1_initial.sql
// static/scripts/demo.html
// static/scripts/passport.js
// DO NOT EDIT!

package static

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _staticMigrations1_initialSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\xd0\x31\x6f\xb3\x30\x10\x06\xe0\xdd\xbf\xe2\xe4\x09\xf4\x85\xe1\x93\xaa\x2e\x4c\x26\x5c\xd2\x53\xc1\x50\x63\x57\xc9\x54\xa1\xe2\x46\xa8\x0d\x20\x07\x9a\xbf\x5f\x91\xc4\x55\x23\x71\xf3\xf3\xbe\xf6\x5d\x14\xc1\xbf\x63\x7b\x70\xf5\x68\xc1\x0c\x8c\xad\x15\x0a\x8d\x80\x3b\x8d\xb2\xa2\x42\x02\x6d\x40\x16\x1a\x70\x47\x95\xae\x80\x4f\x53\xdb\x44\xfd\xe9\x34\xf0\xf8\x17\x6b\x91\x64\x08\xfc\xa3\xed\x0e\xd6\x0d\xae\xed\x46\x0e\x01\x03\xe0\x6d\xc3\xc1\x4f\x42\xdb\x0a\x15\x89\x0c\x4a\x45\xb9\x50\x7b\x78\xc6\xfd\x6a\x56\xc7\xda\x7d\x5a\x77\x95\xc6\x50\xea\x13\xf3\xb3\xd2\x64\xd9\x05\x7d\xd7\x5f\x93\xbd\xb5\xbd\x0a\xb5\x7e\x12\x2a\x78\x7c\x08\xef\xd1\x7b\x3f\x75\xe3\xad\x2a\xa1\x2d\x49\x7d\xdf\x04\x29\x6e\x84\xc9\x34\xfc\xbf\x72\x67\xeb\xd1\x36\x6f\xf5\xc8\x41\x53\x8e\x95\x16\x79\xb9\xc4\xbb\xfe\x1c\x84\x97\xc8\x34\x34\xcb\x91\x99\xcf\xe3\x23\xfe\x4f\x46\xd2\x8b\x41\x08\xfc\x96\x2b\xbf\x4a\xc8\xc2\x98\xb1\xbf\xe7\x4f\xfb\x73\xc7\x58\xaa\x8a\x72\xe9\xa2\x31\xfb\x09\x00\x00\xff\xff\xc9\xeb\xcc\xee\xab\x01\x00\x00")

func staticMigrations1_initialSqlBytes() ([]byte, error) {
	return bindataRead(
		_staticMigrations1_initialSql,
		"static/migrations/1_initial.sql",
	)
}

func staticMigrations1_initialSql() (*asset, error) {
	bytes, err := staticMigrations1_initialSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/migrations/1_initial.sql", size: 427, mode: os.FileMode(420), modTime: time.Unix(1522322075, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _staticScriptsDemoHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x55\x51\x6f\xa3\x46\x10\x7e\x86\x5f\x31\xe1\xe1\x80\x86\xb0\x76\x4e\xad\x22\xdb\x58\x95\xd2\xbb\xaa\x7d\x68\xae\x8d\xab\xaa\x8f\x9b\x65\xb0\xd7\x5d\xef\x92\xdd\x21\x3e\x2b\xe7\xff\x5e\x2d\x10\x1b\x27\xb1\x74\x3c\xd8\x62\x76\xe6\xfb\x3e\xbe\x19\x86\xd9\xc5\x2f\x77\xb7\x8b\x7f\xbf\x7c\x82\x15\x6d\xd4\x3c\x9c\xf9\x3f\x50\x5c\x2f\x8b\x08\x75\xe4\x03\xc8\xcb\x79\x08\x00\x30\xdb\x20\x71\x10\x2b\x6e\x1d\x52\x11\xfd\xbd\xf8\x7c\x75\x13\xf5\x47\x24\x49\xe1\x7c\x81\x8e\xe0\xb3\xd4\x4b\xb4\xb5\x95\x9a\x66\xac\x8b\x87\x33\xd6\xc1\xcc\x1e\x4c\xb9\x9b\x87\x33\x27\xac\xac\x09\x9c\x15\x45\xb4\x22\xaa\xdd\x84\x31\x51\xea\xb5\xcb\x85\x32\x4d\x59\x29\x6e\x31\x17\x66\xc3\xf8\x9a\x7f\x65\x4a\x3e\x38\xb6\x7e\x6c\xd0\xee\xd8\xc7\xfc\x63\x3e\xee\x6f\xf2\x8d\xd4\xf9\xda\x45\xf3\x19\xeb\x00\xcf\x23\xe7\x6b\x57\xa2\x92\x4f\x36\xd7\x48\x4c\xd7\x1b\x56\x1d\x65\xae\xdd\xf5\xcf\xe3\xfc\xa7\x7c\xcc\x4a\xe9\x68\x78\x72\x7d\x9e\x62\x1e\x26\x55\xa3\x05\x49\xa3\x21\x79\xe0\x0e\x33\x70\x72\xa9\xd1\x66\xe0\x50\x97\x68\xd3\xe7\xd6\x9a\xb8\x71\x08\x8e\xac\x14\x14\x4f\xc3\x36\xf4\xc4\x2d\xd4\x7c\xa7\x0c\x2f\xa1\x80\xe7\x78\x40\x18\x4f\xa0\xd1\x25\x56\x52\x63\x99\x41\xec\x1d\x2f\x39\xf1\x57\x61\x61\x1a\x4d\x68\x87\xd1\x7d\x06\x6e\xa7\x05\x7a\xc4\x8a\x2b\x87\x3d\xd7\x41\xa3\x36\x24\xab\x5d\x92\x42\x27\xeb\x45\x47\x63\x15\x14\xe0\xf5\x4f\x0f\x71\x59\x41\xd2\x58\x95\xbb\xe6\xc1\x91\x4d\xae\xc6\x29\x14\x45\x01\x31\x8b\x53\x78\xee\x2b\x06\xe7\xa3\xac\xbd\x53\xa8\x97\xb4\x82\x2b\x18\xa7\x53\xd8\x1f\xc0\x7c\xfa\xa5\x2f\xe6\xb5\x64\x4f\x63\x46\x96\x8b\xff\xd0\x0e\x5d\x8e\x8f\xd4\x9d\x75\xc9\x51\xa3\xbf\x68\x57\xe3\x04\xe2\x2f\x77\xf7\x8b\x38\x3b\x39\x69\xac\x9a\xf8\x9f\xd3\xa8\x77\x6c\x02\xbf\xdf\xdf\xfd\x91\x7b\xe3\xf5\xd2\x3f\x78\x6f\x78\x7a\x9a\x2a\x8c\x26\xd4\xb4\xe8\x18\x78\x5d\x2b\x29\xb8\xf7\x8b\xad\x9d\xd1\xd3\xc3\xb4\x37\x54\x5d\xdd\xbc\x22\x77\x8d\x10\xe8\xdc\xe4\xe8\xb1\x77\xf7\xd8\x06\xb2\x0d\x0e\x9d\xd8\xa7\xdd\x73\xee\x8f\x53\x20\x8c\xb5\x28\xc8\x58\x28\xc0\x21\xfd\xe6\xbb\xfa\xc4\x55\x72\x82\x78\x00\xd0\xb8\xed\x67\x2c\x49\xf3\x25\xd2\x21\x2d\xb1\xe8\x1a\x45\x19\x08\xb3\xa9\x8d\x46\x4d\x6e\x58\xf7\xd2\xd3\x2e\x0b\x2e\x8a\xe2\x65\xfc\xf2\x41\x17\x5e\x57\xf8\xeb\x9d\x34\x28\xa0\xc3\x99\x9e\xcd\x7e\x99\x5a\x28\x06\x82\xce\xa7\xf7\xd3\x0c\x05\x8c\x4e\x93\xf6\x6f\x9e\xe0\xf2\xf2\x75\xd1\x1c\xae\xdf\x13\x2e\x14\x72\x7b\xb0\xf3\x60\x73\xfa\x56\x45\xdf\xae\x6f\xdf\x0e\x6f\xc8\x39\x11\xfb\xb4\x6b\x5f\x06\xe3\xd1\x28\x1d\xbc\xcb\x5b\x4e\x62\x85\xdf\xd7\xc3\x9e\xee\xc3\x87\x57\x12\x7b\x8c\x01\xf9\x39\x61\xfb\x0c\x7e\x1c\xb5\x02\xf6\x49\xec\x57\xdc\x84\x31\x65\x04\x57\x2b\xe3\x68\x72\x33\xba\x19\xb1\x38\x83\xad\xd4\xa5\xd9\xe6\x83\x65\x7c\x7d\x08\xae\xff\x6c\xb7\xa7\xdf\xad\x69\x3a\x0d\xdf\x6e\x4f\xff\xc2\x15\x91\xd3\xb2\xae\x91\xa2\x79\x18\xd8\xfc\x57\xa4\x24\x62\x25\x6e\x4c\x94\xb5\x03\x9f\xd8\x2d\x78\xf6\xfc\x2f\x74\xb5\xd1\x0e\xff\xb1\x92\xfc\xf6\xb3\xf8\x08\x3f\xf4\x27\x8f\x0d\xba\x76\xb0\x82\xa0\xca\x00\xad\x85\x49\x01\xc6\xe5\x77\x35\xea\x24\x72\xc4\x49\x8a\x9e\xdd\xb5\xe0\xb9\xff\xfe\x44\x69\x18\x04\xb2\x6a\xf3\x2f\x0a\xd0\x52\xb5\x08\x41\x0b\xfa\xc9\x5a\x63\x13\xbb\xcd\x3a\xf6\x7b\xe2\xd4\xb8\x05\x7e\xa5\x64\x70\xdf\xda\xaa\xb9\xba\x47\xfb\x84\xb6\x2d\x49\x4f\x0a\xde\x4b\x08\x83\x60\x1f\x06\x41\x89\x15\x5a\xa8\xf2\x5b\x65\x1c\x26\xad\x14\x93\xdf\x9a\x7a\xd7\x92\x56\x69\x18\xec\xd3\xa1\x67\xac\xff\xa6\xb1\xee\x0b\xfa\x7f\x00\x00\x00\xff\xff\x6d\x4a\x2d\x53\x52\x07\x00\x00")

func staticScriptsDemoHtmlBytes() ([]byte, error) {
	return bindataRead(
		_staticScriptsDemoHtml,
		"static/scripts/demo.html",
	)
}

func staticScriptsDemoHtml() (*asset, error) {
	bytes, err := staticScriptsDemoHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/scripts/demo.html", size: 1874, mode: os.FileMode(420), modTime: time.Unix(1522353766, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _staticScriptsPassportJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x53\xc1\x6e\xdb\x30\x0c\xbd\xf7\x2b\xb8\x4b\x6d\xa1\x8e\xdb\xee\x34\xc4\xd0\x0e\x1b\x36\x60\xc3\xb0\x6e\x6b\x86\x9d\x55\x99\x4e\x1c\xb8\x94\x21\x51\xcd\x82\x54\xff\x3e\x28\x76\x6c\x27\x6d\x80\xf9\x10\x20\xd4\x23\xf9\xf8\x1e\x99\x56\x9e\x34\xd7\x86\x20\x7d\x50\x0e\x33\x70\xf5\x92\xd0\x66\xe0\x90\x4a\xb4\x62\x77\x01\x00\x90\x78\x87\xe0\xd8\xd6\x9a\x93\xe2\x62\x1f\x7a\x52\x16\x5a\xb5\x6d\x8c\x2a\x41\xc2\x2e\xa9\x6a\x5a\xa2\x6d\x6d\x4d\x9c\xcc\xc1\x53\x89\x55\x4d\x58\x66\x90\x3c\x22\xab\x52\xb1\x3a\x09\x6b\xe3\x89\xd1\x4e\xa3\x21\x03\xb7\x25\x8d\xb1\x62\xa5\x1a\x87\x7d\xaf\x81\x23\x19\xae\xab\x6d\x2a\xa0\xa3\x75\xe0\xe1\x6d\x03\x12\x22\xff\x62\x88\xd7\x15\xa4\xde\x36\xb9\xf3\x0f\x8e\x6d\x3a\xbb\x15\x20\xa5\x84\xe4\x3a\x11\xb0\xeb\x33\x26\xef\x37\xd9\xfe\x5f\x83\xb4\xe4\x15\xcc\xe0\x56\x14\x10\x86\x62\x11\x7e\x25\x21\xd9\xed\x20\xff\x44\x65\x6b\x6a\x62\x08\x21\x19\xdb\x75\x72\xa5\x23\xaf\xf8\xf1\xb6\xc5\x39\x24\x3f\xee\xee\x17\x49\x76\xf4\xe2\x6d\x33\x8f\x3f\xc7\xd1\xa8\xd2\x1c\xbe\xde\xdf\x7d\xcf\xa3\xd8\xb4\x8c\xc3\xf6\x22\x8b\x63\xa8\x36\xc4\x48\xbc\xe8\x3a\xa8\xb6\x6d\x6a\xad\xa2\x46\xd7\x6b\x67\xa8\x00\xbd\x52\xd6\x21\x4b\xcf\xd5\xec\xdd\x49\x73\xe7\xb5\x46\xe7\xe6\xa3\xae\x51\xd1\x51\x7a\xb6\x1e\xa7\xd3\x07\xd1\xcd\x19\x46\xe7\xb5\xb1\x16\x35\x1b\x0b\x12\x1c\xf2\x97\xe8\xe4\x93\x6a\xd2\xa3\x8a\x43\x01\xc2\x4d\xbf\x57\xa9\xc8\x97\xc8\x03\x2c\xb5\xe8\x7c\xc3\x19\x68\xf3\xd8\x1a\x42\x62\x37\xcd\x3b\xf8\xd8\xa1\xe0\x8d\x94\x87\x95\xcb\x27\xeb\x76\x9a\x11\xbf\x57\x60\x20\xa1\xab\x53\x9c\x45\x1f\x36\x15\xe4\x84\xd0\x79\x78\xbf\xc1\x20\xe1\xe6\x18\x14\x5e\x4c\x70\x75\x75\x9a\xf4\x1e\xe2\x32\x2d\x56\x16\xdd\xca\x34\x25\x84\xf0\xda\x1c\xba\x41\x65\x07\x75\x07\xd5\xc5\x4b\x52\xbd\x7b\xcf\xcf\xc3\x91\x9c\xe3\x14\x44\xe7\x66\xb6\x67\xf0\xb1\xab\x19\xfb\x4f\x2e\x7b\xa3\x58\xaf\xf0\xff\xdc\xed\x3b\x5f\x5e\x9e\xb0\xed\x6b\x4c\x78\x9c\xe3\xd8\x53\xf9\x13\x13\x3a\x22\x21\xdd\xdf\xda\x07\xe5\xf0\xf7\xaf\x6f\xf1\xd4\x32\xd8\xd4\x54\x9a\x4d\xfe\x79\xb4\xf4\xed\x10\x5c\xff\xf4\x68\xb7\xb9\x5a\xab\xbf\x42\x14\x17\xff\x02\x00\x00\xff\xff\x7f\x93\x20\x2f\xd6\x04\x00\x00")

func staticScriptsPassportJsBytes() ([]byte, error) {
	return bindataRead(
		_staticScriptsPassportJs,
		"static/scripts/passport.js",
	)
}

func staticScriptsPassportJs() (*asset, error) {
	bytes, err := staticScriptsPassportJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/scripts/passport.js", size: 1238, mode: os.FileMode(420), modTime: time.Unix(1522353755, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"static/migrations/1_initial.sql": staticMigrations1_initialSql,
	"static/scripts/demo.html": staticScriptsDemoHtml,
	"static/scripts/passport.js": staticScriptsPassportJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"static": &bintree{nil, map[string]*bintree{
		"migrations": &bintree{nil, map[string]*bintree{
			"1_initial.sql": &bintree{staticMigrations1_initialSql, map[string]*bintree{}},
		}},
		"scripts": &bintree{nil, map[string]*bintree{
			"demo.html": &bintree{staticScriptsDemoHtml, map[string]*bintree{}},
			"passport.js": &bintree{staticScriptsPassportJs, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

