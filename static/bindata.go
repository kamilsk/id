// Code generated by go-bindata.
// sources:
// static/migrations/1_initial.sql
// static/scripts/passport.min.js
// DO NOT EDIT!

package static

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _staticMigrations1_initialSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\xd0\x31\x6f\xb3\x30\x10\x06\xe0\xdd\xbf\xe2\xe4\x09\xf4\x85\xe1\x93\xaa\x2e\x4c\x26\x5c\xd2\x53\xc1\x50\x63\x57\xc9\x54\xa1\xe2\x46\xa8\x0d\x20\x07\x9a\xbf\x5f\x91\xc4\x55\x23\x71\xf3\xf3\xbe\xf6\x5d\x14\xc1\xbf\x63\x7b\x70\xf5\x68\xc1\x0c\x8c\xad\x15\x0a\x8d\x80\x3b\x8d\xb2\xa2\x42\x02\x6d\x40\x16\x1a\x70\x47\x95\xae\x80\x4f\x53\xdb\x44\xfd\xe9\x34\xf0\xf8\x17\x6b\x91\x64\x08\xfc\xa3\xed\x0e\xd6\x0d\xae\xed\x46\x0e\x01\x03\xe0\x6d\xc3\xc1\x4f\x42\xdb\x0a\x15\x89\x0c\x4a\x45\xb9\x50\x7b\x78\xc6\xfd\x6a\x56\xc7\xda\x7d\x5a\x77\x95\xc6\x50\xea\x13\xf3\xb3\xd2\x64\xd9\x05\x7d\xd7\x5f\x93\xbd\xb5\xbd\x0a\xb5\x7e\x12\x2a\x78\x7c\x08\xef\xd1\x7b\x3f\x75\xe3\xad\x2a\xa1\x2d\x49\x7d\xdf\x04\x29\x6e\x84\xc9\x34\xfc\xbf\x72\x67\xeb\xd1\x36\x6f\xf5\xc8\x41\x53\x8e\x95\x16\x79\xb9\xc4\xbb\xfe\x1c\x84\x97\xc8\x34\x34\xcb\x91\x99\xcf\xe3\x23\xfe\x4f\x46\xd2\x8b\x41\x08\xfc\x96\x2b\xbf\x4a\xc8\xc2\x98\xb1\xbf\xe7\x4f\xfb\x73\xc7\x58\xaa\x8a\x72\xe9\xa2\x31\xfb\x09\x00\x00\xff\xff\xc9\xeb\xcc\xee\xab\x01\x00\x00")

func staticMigrations1_initialSqlBytes() ([]byte, error) {
	return bindataRead(
		_staticMigrations1_initialSql,
		"static/migrations/1_initial.sql",
	)
}

func staticMigrations1_initialSql() (*asset, error) {
	bytes, err := staticMigrations1_initialSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/migrations/1_initial.sql", size: 427, mode: os.FileMode(420), modTime: time.Unix(1522409989, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _staticScriptsPassportMinJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x93\xc1\x8e\xdb\x36\x10\x86\xef\x7d\x0a\x8a\x07\x81\x84\xb9\x8a\xb7\xa7\x42\x02\x5b\xa0\x69\x03\xb4\x08\x9a\xb4\xd9\xa2\x67\x2e\x35\xb2\xb8\xa0\x49\x81\x1c\xad\x63\xd0\x7c\xf7\x42\xb6\x25\xcb\x45\xf7\x92\x9b\x66\x34\x9c\xf9\xf9\xfd\xc3\xa2\x1b\x9d\x46\xe3\x1d\x43\xe1\x44\x10\x20\xbc\x50\x3c\xd1\x31\x02\x89\x18\x8c\x46\xda\x60\xf5\x59\xc5\x38\xf8\x80\x32\x75\xc6\xed\x20\x0c\xc1\x38\xac\x5f\xbd\x69\xc9\x56\xec\x01\x55\xab\x50\xcd\xb1\xf6\xa3\x43\x08\x73\x18\x8f\x4e\x43\x7b\x8d\x72\xf3\xaa\x02\x31\xdf\xd0\x27\x0b\x2d\x8b\x47\x11\x65\xf1\xd8\xcc\x9a\x49\xcb\x90\x27\x55\x96\x9e\xd1\xe1\x2a\xb1\x26\x74\x83\x3c\x2f\x25\x23\x0b\xc2\xf3\x34\x8d\x55\x92\xd1\x77\x54\x4a\xe9\xaa\x38\x3e\x47\x0c\xec\xe1\x91\xff\xb4\x04\x5b\xe1\x2a\x0b\x6e\x87\xfd\xc3\x23\xaf\x1d\xdf\xd0\x94\xaa\x5f\x5d\x3b\x78\xe3\x30\x67\xda\x00\x4b\x78\x1c\xa0\xa6\x9f\x3f\x7d\x79\xa2\x62\x0c\xb6\x56\xe2\xac\xf8\xf7\x2f\x9f\xfe\xa8\x26\x5c\x6e\x67\xba\x23\x33\x5c\x68\xef\x10\x1c\x3e\x9d\xeb\xd5\x30\x58\xa3\xd5\xa4\xe7\xdd\x4b\xf4\xae\x21\xba\x57\x21\x02\xca\x11\xbb\x87\x1f\xa8\xf8\xda\x87\x0f\x06\x6c\x1b\xeb\x74\x30\xd8\xbf\x0f\xd0\x82\x43\xa3\x6c\xac\x8b\x6d\x16\x71\xd4\x1a\x62\xac\x17\xaf\x78\xd2\xb2\xd8\x0a\x6d\x41\x85\xdf\x26\x48\xaf\xca\xb2\xc0\xc5\xcd\xa9\x6a\x05\x58\x9a\x75\xb4\x2e\x9a\x91\x4b\xb3\x7c\xae\x7f\x5f\x1d\x90\x66\xfe\x12\x2d\xa3\x11\x5c\x0b\x81\xf4\x2a\x92\x8b\xb5\x44\x91\x41\x1d\xad\x57\x2d\xe5\xa2\x65\x7e\x43\x89\x89\xa4\xf5\x0e\x28\xcf\x42\xfb\xfd\x60\x01\x61\x2d\xfe\x6c\xe2\xa5\xf2\xdc\x06\x1c\x12\x45\x9c\x47\xd3\x5d\x31\x11\xf4\x84\x6e\x14\x6f\x72\x5e\x79\x39\x30\x9e\x02\xe0\x18\x5c\xa1\xcb\x72\x51\xf5\x63\x4a\xd5\x47\xb3\x37\x98\xf3\x7f\x56\x41\x07\x83\x46\x2b\x5b\xcf\x0a\xc9\x41\xc5\x69\x10\x79\x86\xf3\x58\xca\x85\x3e\x9d\xfe\xaf\x53\x9e\x36\xa6\x93\x11\x70\x01\xbc\xba\x41\x11\xcb\x92\x39\x38\x90\xc0\xab\x1d\x20\x5b\xbf\x22\x9e\x4c\xc7\xb0\x90\xf7\xd8\xcb\x92\xdd\xc5\x12\xc5\x0d\xba\x74\x62\xd1\x20\xb7\x13\x65\xed\x43\x00\x8d\xfe\x02\x7a\xaf\x5a\x20\x8a\x5c\x93\xc6\x3b\xca\xf9\xed\xc4\x66\x23\x06\xc6\xf9\x85\x0c\xb9\x5f\x8a\x8e\x8b\xf3\xfb\xb9\x6b\xb9\xd8\xd3\xdc\x6e\x2e\x53\xaa\x9e\xfa\x00\xb1\xf7\xb6\x9d\x40\xb2\x38\xad\xd8\xc8\x3a\x71\x3b\x49\x39\xcf\x3c\x8b\x94\xaa\xf7\x97\x54\xce\x5c\xd8\xb7\x20\x99\x8e\xbd\xa9\xcb\xde\x74\x1d\x14\xea\x1e\xd6\xaa\xe2\xe9\x34\x4f\xb7\x62\xfe\x3f\xcd\x9e\x26\xff\x33\x85\xd3\x5a\xb0\x83\x71\xad\x3f\x88\xe9\x99\xfe\xac\x22\xfc\xfd\xd7\xc7\x9c\xa9\xb8\x64\xab\x0f\x37\xd4\xdf\xcf\xb9\x97\x3f\x47\x08\xc7\x4a\xbd\xa8\xaf\x73\x4a\x7b\x17\xbd\x85\xca\xfa\xdd\xd4\xfc\x17\x78\x1e\x77\x39\xf3\xe6\xbb\x7f\x03\x00\x00\xff\xff\xca\xdc\x05\xdf\x19\x05\x00\x00")

func staticScriptsPassportMinJsBytes() ([]byte, error) {
	return bindataRead(
		_staticScriptsPassportMinJs,
		"static/scripts/passport.min.js",
	)
}

func staticScriptsPassportMinJs() (*asset, error) {
	bytes, err := staticScriptsPassportMinJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/scripts/passport.min.js", size: 1305, mode: os.FileMode(420), modTime: time.Unix(1522434420, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"static/migrations/1_initial.sql": staticMigrations1_initialSql,
	"static/scripts/passport.min.js": staticScriptsPassportMinJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"static": &bintree{nil, map[string]*bintree{
		"migrations": &bintree{nil, map[string]*bintree{
			"1_initial.sql": &bintree{staticMigrations1_initialSql, map[string]*bintree{}},
		}},
		"scripts": &bintree{nil, map[string]*bintree{
			"passport.min.js": &bintree{staticScriptsPassportMinJs, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

