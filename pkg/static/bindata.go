// Code generated by go-bindata.
// sources:
// pkg/static/migrations/1_common.sql
// pkg/static/migrations/2_account.sql
// pkg/static/migrations/3_domain.sql
// pkg/static/scripts/passport.min.js
// DO NOT EDIT!

package static

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _staticMigrations1_commonSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\xce\xc1\x0a\x82\x40\x14\x85\xe1\xfd\x7d\x8a\xc3\x6c\xa6\x28\x9f\xc0\x95\xe4\x0d\x5c\x34\x8a\x33\x82\x2d\x45\x2f\x21\x94\x23\xe3\x0c\xbd\x7e\x8b\x22\x6a\xf7\x2d\x0e\x87\x3f\xcb\x70\x78\xcc\xb7\x30\x44\x41\xb7\x12\x9d\x5a\x2e\x1c\x83\x7b\xc7\xc6\x56\xb5\x41\x75\x86\xa9\x1d\xb8\xaf\xac\xb3\x50\x29\xcd\x53\xe6\xb7\x6d\x55\xf9\x77\xec\xae\x0d\x43\x0d\x63\x9c\xfd\xa2\x50\x58\xb0\xe9\x2e\xd8\xe9\x31\xc8\x10\x45\x1f\xa1\xd3\x3a\x7d\x34\xc9\x5d\xde\x0a\xb2\x45\x1f\x44\xef\x73\xa2\xdf\x8a\xd2\x3f\x17\xa2\xb2\xad\x9b\xff\xe3\x9c\x5e\x01\x00\x00\xff\xff\x86\xa0\x2c\x9d\xac\x00\x00\x00")

func staticMigrations1_commonSqlBytes() ([]byte, error) {
	return bindataRead(
		_staticMigrations1_commonSql,
		"static/migrations/1_common.sql",
	)
}

func staticMigrations1_commonSql() (*asset, error) {
	bytes, err := staticMigrations1_commonSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/migrations/1_common.sql", size: 172, mode: os.FileMode(420), modTime: time.Unix(1547398776, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _staticMigrations2_accountSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x94\x31\x4f\xc3\x30\x10\x85\x77\xff\x8a\x93\xa7\x56\xd0\x8d\x2d\x93\x21\x46\x8a\x48\xda\x28\x9c\x25\x3a\x59\x56\x7c\xaa\x22\xa8\x13\x05\x9b\xf2\xf3\x51\x4a\x02\x49\x80\xa5\xea\x82\x7a\x93\x75\xf2\xfb\x9e\xfc\xce\xba\xd5\x0a\xae\xf6\xd5\xae\x35\x9e\x40\x35\x8c\xdd\x15\x52\xa0\x04\x14\xb7\xa9\x04\x6e\xca\xb2\x0e\xce\x73\xb6\x60\x00\xbc\xb2\x1c\x86\x52\x2a\x89\x3f\x4f\xeb\x0d\xc2\x5a\xa5\x29\xe4\x45\x92\x89\x62\x0b\x0f\x72\x0b\xb1\xbc\x17\x2a\x45\x08\xa1\xb2\x7a\x47\x8e\x3a\x03\xfd\x76\xb3\x58\x5e\x77\x24\x67\xf6\x34\xb0\x50\x3e\xe1\x94\x74\xbc\x52\xb6\x64\x3c\x59\x6d\x3c\x07\x4c\x32\xf9\x88\x22\xcb\xbf\xcd\xc6\x35\x98\xb9\xfa\xd0\xf3\x43\x63\x7f\x13\xcf\x85\x63\xf1\x97\xb1\xa5\x17\x3a\x41\xcb\x96\xd1\x3c\xbd\xf0\x4a\xed\xd9\xa3\xeb\x47\xa2\x3b\xe2\x4f\xd2\x05\xa5\xeb\xeb\x67\x72\x67\x8f\xb7\x9b\x99\xee\x71\x7f\xc4\x4b\xef\x4d\xd5\x9e\xf8\xfc\x7f\x99\xfb\x78\x47\xc4\xf5\xc1\x31\x16\x17\x9b\x7c\x3a\x87\x68\xda\x3c\x7e\xfd\x59\x6f\x58\x26\x11\xfb\x08\x00\x00\xff\xff\x4f\xe9\xf9\x98\x75\x04\x00\x00")

func staticMigrations2_accountSqlBytes() ([]byte, error) {
	return bindataRead(
		_staticMigrations2_accountSql,
		"static/migrations/2_account.sql",
	)
}

func staticMigrations2_accountSql() (*asset, error) {
	bytes, err := staticMigrations2_accountSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/migrations/2_account.sql", size: 1141, mode: os.FileMode(420), modTime: time.Unix(1547400062, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _staticMigrations3_domainSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x93\x5f\xaf\x93\x40\x10\xc5\xdf\xf7\x53\x4c\x88\xc9\xa5\xb9\x97\x17\x7d\xe4\x69\x5b\xf6\xd6\xb5\xfc\x13\x76\xd5\xc6\x5a\xb2\xc2\x4a\x48\x70\xb7\x01\x9a\x6a\x8c\x7e\x76\x03\x95\x16\x2a\xcd\x65\x12\x9e\xf8\x9d\x61\xe6\x1c\xc6\xb2\xe0\xf1\x7b\x91\x57\xa2\x91\xc0\x0f\x08\xad\x22\x82\x19\x01\x27\xf0\x30\xf5\xc1\xf8\x56\xa8\x5c\x56\x87\xaa\x50\x8d\x01\x38\x06\x46\x3e\x31\x58\xbd\x25\xab\x0d\x98\x1f\xb0\xcb\x09\xfc\x81\x87\xfd\xe7\x7d\xb2\xfb\xf8\xe5\xd7\x9b\xd7\xbf\x5f\x3d\x2c\xec\x4b\x13\x86\x97\x2e\x01\x23\xd5\xaa\xa9\x74\x69\x20\x13\x01\x18\x45\x66\xc0\xa5\x96\x74\x1d\x93\x88\x62\x17\xc2\x88\x7a\x38\xda\xc2\x86\x6c\x9f\x5a\xac\x96\x75\x5d\x68\x75\x66\x39\xa7\x4e\x2f\xf1\x03\x06\x3e\x77\xdd\x8e\x1a\x8d\xf7\x4c\xfd\x35\x89\xc2\x88\xfa\x6c\x4c\xb5\x03\xc8\x1f\xcd\xb9\xd7\xbb\x38\xf0\x97\x53\xbd\xd2\x4a\x8a\x46\x66\x89\x68\x41\x46\x3d\x12\x33\xec\x85\x03\x0a\x1c\xf2\x8c\xb9\xcb\x40\xe9\x93\xb9\xe8\x34\xc7\x43\x76\x47\xd3\xf2\x6d\xf5\x9a\xcb\x67\x32\x59\xca\xf9\x12\x34\xb0\xb3\xcf\x24\x17\xad\x87\x77\xc3\xe0\xd8\xda\x65\x8f\xed\x33\x15\x46\x2e\xac\xaf\x52\xa4\x5a\x4d\xc5\xf1\x42\x26\x22\x4d\xf5\x51\x35\xc9\x55\x73\x0d\x66\x64\x65\xae\x75\x5e\xca\x44\x28\x51\xfe\x6c\x8a\xb4\x36\x60\x8d\x27\xc1\x91\xe7\x5d\x5d\x1d\x99\x6b\xfb\xad\x6c\x9e\xf3\x73\x55\xdc\xa7\xef\x39\x01\x73\xb8\xfc\xd3\xc4\x86\x8b\x2e\xa9\xe1\x35\x39\xfa\xa4\x10\x72\xa2\x20\xfc\xdf\x7b\xfb\xdf\x8b\x51\xa4\xf6\x98\xee\xcf\xe6\x96\x1d\xfe\xf3\x36\xfa\x1b\x00\x00\xff\xff\xfc\xbc\xc2\x00\xc0\x03\x00\x00")

func staticMigrations3_domainSqlBytes() ([]byte, error) {
	return bindataRead(
		_staticMigrations3_domainSql,
		"static/migrations/3_domain.sql",
	)
}

func staticMigrations3_domainSql() (*asset, error) {
	bytes, err := staticMigrations3_domainSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/migrations/3_domain.sql", size: 960, mode: os.FileMode(420), modTime: time.Unix(1547400209, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _staticScriptsPassportMinJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x93\xdf\x6e\xe3\x2a\x10\xc6\xef\xcf\x53\x90\x1b\xc3\x28\x23\xe4\xb6\x3a\x37\xce\x71\xee\xce\x91\x8e\xb4\xd2\x56\xed\xee\x03\x10\x18\xc7\x34\x04\x5c\x20\xcd\x46\x8e\xdf\x7d\x65\xe7\x6f\x57\xea\x95\x3d\x30\xc3\x7c\xf3\xfb\x40\x34\x3b\xaf\xb3\x0d\x5e\x28\x5c\xa1\x46\x03\x3d\xdf\x25\x62\x29\x47\xab\x33\x5f\x5c\xb6\x19\x89\x00\x7d\x2b\x0d\xad\x76\xeb\xa2\xd0\xc2\xc8\x2e\x52\x63\x7f\xcd\x03\x0c\xd7\xa4\x46\x40\x1f\x29\xef\xa2\x9f\x6d\x8a\xe2\x6d\x69\xa4\xb3\x5b\x9b\x3f\xe5\x73\x1d\x6d\xb6\x5a\xb9\x8a\x75\xea\xe0\x82\x32\x6c\xaf\x12\xf3\x21\xb3\x15\xb1\x44\x3e\x73\xc0\xcd\xf1\x78\xad\xbe\x1d\xbf\x16\x01\x3b\xe8\x6d\x23\x1a\x01\x70\x6a\xc4\xb4\x23\x15\xff\xf7\x99\xe2\x87\x72\x22\x00\x7e\x04\x6b\x18\x89\x6e\xce\x99\x4d\xcc\x04\x4f\x1c\x16\xb6\x11\x33\x07\xbd\xab\x67\x25\xbe\xcd\xe7\x0b\x47\x99\xbd\xd7\x9e\xf6\xec\xe7\xcb\xb7\x57\x52\x51\xb7\xcf\x2a\xaa\x6d\x12\x16\x16\x0d\x65\xdd\x8a\x71\xf3\x85\xde\x77\x94\xb2\x30\x92\xbc\xe9\x82\xf5\x19\xfb\x2d\xe5\x36\x98\x8a\x3f\x7f\x7f\xfd\xc1\x71\x15\xcc\xa1\x7a\x47\x1d\xc9\x90\xcf\x56\xb9\x54\x71\xeb\xb5\xdb\x19\xe2\x03\x80\xcc\x2d\x79\x11\xeb\x65\xff\x58\x96\xff\xd4\x51\xa6\xac\xf2\x2e\x15\xc5\x53\x59\x2e\x6f\x91\xd8\x8c\xc2\x5a\xd9\x58\xbf\xa6\xd8\x45\xeb\x73\x6d\xef\x23\x24\xc1\x13\x79\x43\x91\xb5\x2a\xb1\x74\xf0\x9a\x0c\x53\x17\x84\x1c\x60\x80\x31\x5f\x39\x77\x10\x02\xea\xe5\x38\xea\x03\x9e\x30\x4c\x15\xe4\x33\x53\x23\x66\xdb\x58\xad\x26\x9e\x39\x30\x3e\xbf\x8d\x06\x03\x0c\xc3\x08\xa6\xad\x95\x7c\x56\x29\x75\x21\xe6\xbb\xdf\xe3\xb1\x9f\xec\xaf\xcc\xe9\x1a\x0c\x68\xeb\xfe\x4e\x63\x35\x91\x2f\x07\x7c\xab\x4b\xdc\x8c\xed\x27\x0d\xdb\x3a\x51\xbe\x1a\x74\xbd\x6f\xd0\x8f\xad\x42\xfd\xb0\x38\x1b\x39\xf2\x5e\x09\x90\x6b\xca\xb7\xac\xd1\xee\x4f\x54\xba\x01\xf0\xee\x8c\xaf\x8a\xba\x59\xfd\x19\x60\x51\x88\x3f\x0e\xc2\x50\x97\x23\x56\x1d\x62\x24\x9d\xc3\x89\xec\x56\x19\x62\x8a\x9d\x17\x6d\xf0\x1c\x00\xe7\xf3\xb0\xac\x8d\xcc\x6d\xa4\xd4\x06\x67\x8a\x62\x2d\xb6\x78\xab\xe4\x13\x3a\x01\x68\xe4\x79\x0d\xd0\x7f\x35\xf6\x5a\x78\xe4\x7b\x95\x75\x4b\x63\x21\x1a\x39\x05\x30\x80\xd8\x5b\x6f\xc2\x1e\x4f\x1f\xf9\xdf\x4d\xed\xe3\x65\x4d\x07\x9f\x82\x23\xe9\xc2\x1a\xfb\x8b\x71\x15\xef\x7b\xf9\xef\x39\x18\x06\x8e\xa7\xa7\x56\xf1\xee\xec\x5c\xc5\x38\x4e\x6f\xa9\x7a\xc2\xeb\x10\xd5\x13\x9e\xc5\x56\x8f\x7f\x97\x38\x89\xa8\x1e\xca\xb2\xc4\x93\xcb\xb3\x72\x80\xc5\x5f\xbf\x03\x00\x00\xff\xff\x3d\x52\x4f\x49\x21\x04\x00\x00")

func staticScriptsPassportMinJsBytes() ([]byte, error) {
	return bindataRead(
		_staticScriptsPassportMinJs,
		"static/scripts/passport.min.js",
	)
}

func staticScriptsPassportMinJs() (*asset, error) {
	bytes, err := staticScriptsPassportMinJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/scripts/passport.min.js", size: 1057, mode: os.FileMode(420), modTime: time.Unix(1546936927, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"static/migrations/1_common.sql": staticMigrations1_commonSql,
	"static/migrations/2_account.sql": staticMigrations2_accountSql,
	"static/migrations/3_domain.sql": staticMigrations3_domainSql,
	"static/scripts/passport.min.js": staticScriptsPassportMinJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"static": &bintree{nil, map[string]*bintree{
		"migrations": &bintree{nil, map[string]*bintree{
			"1_common.sql": &bintree{staticMigrations1_commonSql, map[string]*bintree{}},
			"2_account.sql": &bintree{staticMigrations2_accountSql, map[string]*bintree{}},
			"3_domain.sql": &bintree{staticMigrations3_domainSql, map[string]*bintree{}},
		}},
		"scripts": &bintree{nil, map[string]*bintree{
			"passport.min.js": &bintree{staticScriptsPassportMinJs, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

