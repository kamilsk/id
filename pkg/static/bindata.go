// Code generated by go-bindata.
// sources:
// pkg/static/migrations/1_prepare.sql
// pkg/static/migrations/2_domain.sql
// pkg/static/scripts/passport.min.js
// DO NOT EDIT!

package static

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _staticMigrations1_prepareSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x91\x41\x4f\x83\x30\x18\x86\xef\xfd\x15\x6f\x96\x1d\x74\x66\xfb\x01\x36\x1e\xd8\xfa\x81\x4d\xb0\x98\xb6\xc4\xdd\x16\x22\x0d\x21\x19\x0c\xa1\xc4\xbf\x6f\x80\x98\x4d\xdc\x0e\x7a\xec\xd7\xa7\x6f\x9f\xbe\x5d\xaf\xf1\x50\x95\x45\x9b\x79\x87\xb4\x61\x6c\xa7\x29\xb0\x04\xda\x5b\x52\x46\x26\x0a\x32\x84\x4a\x2c\x68\x2f\x8d\x35\x58\xf4\x7d\x99\xaf\x4f\x5d\xd7\x2c\x38\x63\x97\x87\x8d\xcf\xbc\xab\x5c\xed\xb7\xae\x28\xeb\xef\x9c\x30\x55\x3b\x3b\xc4\xf4\x4d\x9e\x79\x77\xf0\x65\xe5\x3a\x9f\x55\xcd\xdd\x3d\x03\x34\xd9\x54\x2b\x03\xab\x65\x14\x91\x46\x60\xb0\x9c\x83\x4b\xb6\xa5\x48\x2a\x86\xd1\x84\xde\x36\x2b\x48\x03\x21\x8d\x95\x6a\x67\x11\xea\xe4\x05\x49\x2c\x36\x2b\x06\xd8\x67\x1a\x40\x8c\xdc\x14\x94\x1f\x32\x8f\xc7\x27\xbc\xf7\x6d\xeb\x6a\x7f\xce\xe5\x23\x38\x19\x0c\xfc\xb0\xa6\xd8\xd0\xe5\x38\x89\xc5\x38\x56\x02\x32\xe4\x8c\x94\xe0\xec\x8a\x60\x1c\xa8\x28\x0d\x22\x42\x73\x6c\x8a\xee\xe3\xc8\xaf\x17\x43\x75\xfe\xa7\xca\xca\xa2\x3e\xb5\xee\x30\xdd\x77\xb3\xaf\x1f\xd4\xb9\xac\xcb\x17\x4c\xde\x33\x10\xf8\xaf\xb6\x38\x7d\xd6\x8c\x09\x9d\xbc\xde\x74\xe5\xf3\xfd\xdf\xdf\xcf\xd9\x57\x00\x00\x00\xff\xff\x1f\x2f\xa5\xa8\x7b\x02\x00\x00")

func staticMigrations1_prepareSqlBytes() ([]byte, error) {
	return bindataRead(
		_staticMigrations1_prepareSql,
		"static/migrations/1_prepare.sql",
	)
}

func staticMigrations1_prepareSql() (*asset, error) {
	bytes, err := staticMigrations1_prepareSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/migrations/1_prepare.sql", size: 635, mode: os.FileMode(420), modTime: time.Unix(1546590942, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _staticMigrations2_domainSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x90\x4f\x4b\xc3\x30\x00\xc5\xef\xf9\x14\x8f\x9c\x5a\x74\x17\x15\x2f\x75\x42\xd6\x44\x0d\x4b\xff\xd0\x26\xe2\x4e\x52\x5c\xac\x01\x4d\x47\x1b\xdc\xd7\x97\x56\x1d\x2d\xec\xdd\x92\xf7\xcb\x0b\xef\xad\x56\xb8\xf8\x72\x6d\xdf\x04\x0b\x73\x20\x24\xad\x04\xd3\x02\xbc\xc8\x98\xcc\x41\xdf\x9d\x6f\x6d\x7f\xe8\x9d\x0f\x14\xac\x86\x16\x2f\x9a\x00\xe9\x93\x48\xb7\x88\x08\x26\x7d\x5a\xdf\x86\x8f\xe8\x99\x29\x23\x62\xdc\xaf\x71\x7d\x05\x96\xf3\xb3\xee\xdd\x1a\xb7\x37\x93\x13\x27\xa7\xdf\x34\xdb\x28\x01\x6a\xbf\xad\x0f\x94\x8c\xb1\xd4\xed\x29\x4e\xda\xc8\xc7\x5a\x54\x92\x29\x94\x95\xcc\x58\xb5\xc3\x56\xec\x2e\x47\x6c\xb0\xc3\xe0\x3a\xff\xcb\x1a\x23\xf9\xff\x93\xbc\xd0\xc8\x8d\x52\x13\xb5\x68\x31\x3b\x2c\xa9\xb7\xde\x36\xc1\xee\x5f\x9b\x40\x01\x2d\x33\x51\x6b\x96\x95\xb3\x2c\x70\xf1\xc0\x8c\xd2\xf0\xdd\x31\x8a\xc9\x58\x60\x3e\x1f\xef\x8e\x9e\x10\x5e\x15\xe5\xb2\x50\xf2\x77\x79\x6e\xd3\x84\xfc\x04\x00\x00\xff\xff\x11\x36\x84\x74\x81\x01\x00\x00")

func staticMigrations2_domainSqlBytes() ([]byte, error) {
	return bindataRead(
		_staticMigrations2_domainSql,
		"static/migrations/2_domain.sql",
	)
}

func staticMigrations2_domainSql() (*asset, error) {
	bytes, err := staticMigrations2_domainSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/migrations/2_domain.sql", size: 385, mode: os.FileMode(420), modTime: time.Unix(1546611696, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _staticScriptsPassportMinJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x93\xdf\x6e\xe3\x2a\x10\xc6\xef\xcf\x53\x90\x1b\xc3\x28\x23\xe4\xb6\x3a\x37\xce\x71\xee\xce\x91\x8e\xb4\xd2\x56\xed\xee\x03\x10\x18\xc7\x34\x04\x5c\x20\xcd\x46\x8e\xdf\x7d\x65\xe7\x6f\x57\xea\x95\x3d\x30\xc3\x7c\xf3\xfb\x40\x34\x3b\xaf\xb3\x0d\x5e\x28\x5c\xa1\x46\x03\x3d\xdf\x25\x62\x29\x47\xab\x33\x5f\x5c\xb6\x19\x89\x00\x7d\x2b\x0d\xad\x76\xeb\xa2\xd0\xc2\xc8\x2e\x52\x63\x7f\xcd\x03\x0c\xd7\xa4\x46\x40\x1f\x29\xef\xa2\x9f\x6d\x8a\xe2\x6d\x69\xa4\xb3\x5b\x9b\x3f\xe5\x73\x1d\x6d\xb6\x5a\xb9\x8a\x75\xea\xe0\x82\x32\x6c\xaf\x12\xf3\x21\xb3\x15\xb1\x44\x3e\x73\xc0\xcd\xf1\x78\xad\xbe\x1d\xbf\x16\x01\x3b\xe8\x6d\x23\x1a\x01\x70\x6a\xc4\xb4\x23\x15\xff\xf7\x99\xe2\x87\x72\x22\x00\x7e\x04\x6b\x18\x89\x6e\xce\x99\x4d\xcc\x04\x4f\x1c\x16\xb6\x11\x33\x07\xbd\xab\x67\x25\xbe\xcd\xe7\x0b\x47\x99\xbd\xd7\x9e\xf6\xec\xe7\xcb\xb7\x57\x52\x51\xb7\xcf\x2a\xaa\x6d\x12\x16\x16\x0d\x65\xdd\x8a\x71\xf3\x85\xde\x77\x94\xb2\x30\x92\xbc\xe9\x82\xf5\x19\xfb\x2d\xe5\x36\x98\x8a\x3f\x7f\x7f\xfd\xc1\x71\x15\xcc\xa1\x7a\x47\x1d\xc9\x90\xcf\x56\xb9\x54\x71\xeb\xb5\xdb\x19\xe2\x03\x80\xcc\x2d\x79\x11\xeb\x65\xff\x58\x96\xff\xd4\x51\xa6\xac\xf2\x2e\x15\xc5\x53\x59\x2e\x6f\x91\xd8\x8c\xc2\x5a\xd9\x58\xbf\xa6\xd8\x45\xeb\x73\x6d\xef\x23\x24\xc1\x13\x79\x43\x91\xb5\x2a\xb1\x74\xf0\x9a\x0c\x53\x17\x84\x1c\x60\x80\x31\x5f\x39\x77\x10\x02\xea\xe5\x38\xea\x03\x9e\x30\x4c\x15\xe4\x33\x53\x23\x66\xdb\x58\xad\x26\x9e\x39\x30\x3e\xbf\x8d\x06\x03\x0c\xc3\x08\xa6\xad\x95\x7c\x56\x29\x75\x21\xe6\xbb\xdf\xe3\xb1\x9f\xec\xaf\xcc\xe9\x1a\x0c\x68\xeb\xfe\x4e\x63\x35\x91\x2f\x07\x7c\xab\x4b\xdc\x8c\xed\x27\x0d\xdb\x3a\x51\xbe\x1a\x74\xbd\x6f\xd0\x8f\xad\x42\xfd\xb0\x38\x1b\x39\xf2\x5e\x09\x90\x6b\xca\xb7\xac\xd1\xee\x4f\x54\xba\x01\xf0\xee\x8c\xaf\x8a\xba\x59\xfd\x19\x60\x51\x88\x3f\x0e\xc2\x50\x97\x23\x56\x1d\x62\x24\x9d\xc3\x89\xec\x56\x19\x62\x8a\x9d\x17\x6d\xf0\x1c\x00\xe7\xf3\xb0\xac\x8d\xcc\x6d\xa4\xd4\x06\x67\x8a\x62\x2d\xb6\x78\xab\xe4\x13\x3a\x01\x68\xe4\x79\x0d\xd0\x7f\x35\xf6\x5a\x78\xe4\x7b\x95\x75\x4b\x63\x21\x1a\x39\x05\x30\x80\xd8\x5b\x6f\xc2\x1e\x4f\x1f\xf9\xdf\x4d\xed\xe3\x65\x4d\x07\x9f\x82\x23\xe9\xc2\x1a\xfb\x8b\x71\x15\xef\x7b\xf9\xef\x39\x18\x06\x8e\xa7\xa7\x56\xf1\xee\xec\x5c\xc5\x38\x4e\x6f\xa9\x7a\xc2\xeb\x10\xd5\x13\x9e\xc5\x56\x8f\x7f\x97\x38\x89\xa8\x1e\xca\xb2\xc4\x93\xcb\xb3\x72\x80\xc5\x5f\xbf\x03\x00\x00\xff\xff\x3d\x52\x4f\x49\x21\x04\x00\x00")

func staticScriptsPassportMinJsBytes() ([]byte, error) {
	return bindataRead(
		_staticScriptsPassportMinJs,
		"static/scripts/passport.min.js",
	)
}

func staticScriptsPassportMinJs() (*asset, error) {
	bytes, err := staticScriptsPassportMinJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/scripts/passport.min.js", size: 1057, mode: os.FileMode(420), modTime: time.Unix(1546692103, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"static/migrations/1_prepare.sql": staticMigrations1_prepareSql,
	"static/migrations/2_domain.sql": staticMigrations2_domainSql,
	"static/scripts/passport.min.js": staticScriptsPassportMinJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"static": &bintree{nil, map[string]*bintree{
		"migrations": &bintree{nil, map[string]*bintree{
			"1_prepare.sql": &bintree{staticMigrations1_prepareSql, map[string]*bintree{}},
			"2_domain.sql": &bintree{staticMigrations2_domainSql, map[string]*bintree{}},
		}},
		"scripts": &bintree{nil, map[string]*bintree{
			"passport.min.js": &bintree{staticScriptsPassportMinJs, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

