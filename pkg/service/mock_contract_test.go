// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kamilsk/passport/pkg/service (interfaces: Storage)

// Package service_test is a generated GoMock package.
package service_test

import (
	gomock "github.com/golang/mock/gomock"
	domain "github.com/kamilsk/passport/pkg/domain"
	reflect "reflect"
)

// MockStorage is a mock of Storage interface
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// TakeFingerprint mocks base method
func (m *MockStorage) TakeFingerprint(arg0 domain.Fingerprint) (domain.Fingerprint, error) {
	ret := m.ctrl.Call(m, "TakeFingerprint", arg0)
	ret0, _ := ret[0].(domain.Fingerprint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TakeFingerprint indicates an expected call of TakeFingerprint
func (mr *MockStorageMockRecorder) TakeFingerprint(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TakeFingerprint", reflect.TypeOf((*MockStorage)(nil).TakeFingerprint), arg0)
}

// UUID mocks base method
func (m *MockStorage) UUID() (domain.UUID, error) {
	ret := m.ctrl.Call(m, "UUID")
	ret0, _ := ret[0].(domain.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UUID indicates an expected call of UUID
func (mr *MockStorageMockRecorder) UUID() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UUID", reflect.TypeOf((*MockStorage)(nil).UUID))
}
